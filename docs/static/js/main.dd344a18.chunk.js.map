{"version":3,"sources":["DateSelector.tsx","App.tsx","index.tsx"],"names":["DateSelector","startYear","setDate","useState","selectedYear","setSelectedYear","selectedMonth","setSelectedMonth","selectedDay","setSelectedDay","today","Date","useEffect","selectedDate","undefined","YearOptions","start","end","years","Array","year","push","value","map","idx","key","MonthOptions","months","month","DayOptions","endDatesOfYear","isLeapYear","days","endDay","day","onChange","event","Number","target","getFullYear","App","date","toString","getMonth","getDate","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dd344a18.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nexport const DateSelector: React.FC<{\n  startYear: number;\n  setDate: React.Dispatch<React.SetStateAction<Date | undefined>>;\n}> = ({ startYear, setDate }) => {\n  const [selectedYear, setSelectedYear] = useState<number | undefined>();\n  const [selectedMonth, setSelectedMonth] = useState<number | undefined>();\n  const [selectedDay, setSelectedDay] = useState<number | undefined>();\n  const today = new Date();\n\n  useEffect(() => {\n    if (selectedYear && selectedMonth && selectedDay) {\n      const selectedDate = new Date(\n        selectedYear,\n        selectedMonth - 1,\n        selectedDay\n      );\n      setDate(selectedDate);\n    } else {\n      setDate(undefined);\n    }\n  }, [setDate, selectedYear, selectedMonth, selectedDay]);\n\n  const YearOptions: React.FC<{ start: number; end: number }> = ({\n    start,\n    end,\n  }) => {\n    const years = new Array<number>();\n    for (let year = start; year <= end; year++) {\n      years.push(year);\n    }\n    return (\n      <>\n        <option value={undefined}>{\"\"}</option>\n        {years.map((year, idx) => {\n          return (\n            <option key={idx} value={year}>\n              {year}\n            </option>\n          );\n        })}\n      </>\n    );\n  };\n\n  const MonthOptions: React.FC = () => {\n    const months = new Array<number>();\n    for (let month = 1; month <= 12; month++) {\n      months.push(month);\n    }\n    return (\n      <>\n        <option value={undefined}>{\"\"}</option>\n        {months.map((month, idx) => {\n          return (\n            <option key={idx} value={month}>\n              {month}\n            </option>\n          );\n        })}\n      </>\n    );\n  };\n\n  const DayOptions: React.FC<{\n    year: number | undefined;\n    month: number | undefined;\n  }> = ({ year, month }) => {\n    year = year ?? startYear;\n    month = month ?? 1;\n    const endDatesOfYear = [\n      31,\n      isLeapYear(year) ? 29 : 28,\n      31,\n      30,\n      31,\n      30,\n      31,\n      31,\n      30,\n      31,\n      30,\n      31,\n    ];\n    const days = new Array<number>();\n    const endDay = endDatesOfYear[month - 1];\n    for (let day = 1; day <= endDay; day++) {\n      days.push(day);\n    }\n    return (\n      <>\n        <option value={undefined}>{\"\"}</option>\n        {days.map((day, idx) => {\n          return (\n            <option key={idx} value={day}>\n              {day}\n            </option>\n          );\n        })}\n      </>\n    );\n  };\n\n  const isLeapYear = (year: number | undefined) => {\n    if (!year) {\n      return false;\n    }\n    return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n  };\n\n  return (\n    <>\n      {/* year */}\n      <select\n        value={selectedYear}\n        onChange={(event: React.ChangeEvent<HTMLSelectElement>) => {\n          const year = Number(event.target.value);\n          // leap year -> not leap year in 2/29\n          if (\n            !isLeapYear(year) &&\n            isLeapYear(selectedYear) &&\n            selectedMonth === 2 &&\n            selectedDay === 29\n          ) {\n            setSelectedMonth(undefined);\n            setSelectedDay(undefined);\n          }\n          setSelectedYear(year);\n        }}\n      >\n        <YearOptions start={startYear} end={today.getFullYear()} />\n      </select>\n\n      {/* month */}\n      <select\n        value={selectedMonth}\n        onChange={(event: React.ChangeEvent<HTMLSelectElement>) => {\n          setSelectedMonth(Number(event.target.value));\n        }}\n      >\n        <MonthOptions />\n      </select>\n\n      {/* day */}\n      <select\n        value={selectedDay}\n        onChange={(event: React.ChangeEvent<HTMLSelectElement>) => {\n          setSelectedDay(Number(event.target.value));\n        }}\n      >\n        <DayOptions year={selectedYear} month={selectedMonth} />\n      </select>\n    </>\n  );\n};\n","import React, { useState } from \"react\";\n\nimport { DateSelector } from \"./DateSelector\";\nconst App = () => {\n  const [date, setDate] = useState<Date | undefined>();\n  return (\n    <>\n      <h1>Hello date selector</h1>\n      <DateSelector startYear={2016} setDate={setDate} />\n      <div>{`date : ${date?.toString()}`}</div>\n      <div>{`year : ${date?.getFullYear()}`}</div>\n      <div>{`month : ${date ? date.getMonth() + 1 : undefined}`}</div>\n      <div>{`day : ${date?.getDate()}`}</div>\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}